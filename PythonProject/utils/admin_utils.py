#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
"""

from core.database import Database
from datetime import datetime, timedelta
import logging
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AdminUtils:
    def __init__(self):
        self.db = Database()
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('SELECT COUNT(*) FROM users')
            total_users = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM masters')
            total_masters = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM appointments WHERE status = "active"')
            active_appointments = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM appointments WHERE status = "completed"')
            completed_appointments = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime("%Y-%m-%d")
            cursor.execute('SELECT COUNT(*) FROM appointments WHERE DATE(created_at) = ?', (today,))
            appointments_today = cursor.fetchone()[0]
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏
            cursor.execute('''
                SELECT s.name, COUNT(*) as count
                FROM appointments a
                JOIN services s ON a.service_id = s.id
                WHERE a.status != 'cancelled'
                GROUP BY s.id
                ORDER BY count DESC
                LIMIT 5
            ''')
            popular_services = cursor.fetchall()
            
            return {
                'total_users': total_users,
                'total_masters': total_masters,
                'active_appointments': active_appointments,
                'completed_appointments': completed_appointments,
                'appointments_today': appointments_today,
                'popular_services': popular_services
            }
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        stats = self.get_statistics()
        
        print("\n" + "="*50)
        print("         –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê")
        print("="*50)
        print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}")
        print(f"üë®‚Äçüíº –í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {stats['total_masters']}")
        print(f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {stats['active_appointments']}")
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {stats['completed_appointments']}")
        print(f"üìä –ó–∞–ø–∏—Å–∏ —Å–µ–≥–æ–¥–Ω—è: {stats['appointments_today']}")
        
        print("\nüèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏:")
        for i, (service, count) in enumerate(stats['popular_services'], 1):
            print(f"{i}. {service}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        print("="*50)
    
    def get_users_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, username, first_name, is_master, created_at
                FROM users
                ORDER BY created_at DESC
            ''')
            return cursor.fetchall()
    
    def get_masters_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤"""
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT m.*, u.username, u.first_name
                FROM masters m
                JOIN users u ON m.user_id = u.user_id
                ORDER BY m.id
            ''')
            return cursor.fetchall()
    
    def get_recent_appointments(self, days=7):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
        cutoff_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d")
        
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT a.*, u.first_name as client_name, u.username,
                       m.name as master_name, s.name as service_name
                FROM appointments a
                JOIN users u ON a.client_id = u.user_id
                JOIN masters m ON a.master_id = m.id
                JOIN services s ON a.service_id = s.id
                WHERE DATE(a.created_at) >= ?
                ORDER BY a.created_at DESC
            ''', (cutoff_date,))
            return cursor.fetchall()
    
    def cleanup_cancelled_appointments(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π"""
        cutoff_date = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")
        
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                DELETE FROM appointments 
                WHERE status = 'cancelled' AND DATE(created_at) < ?
            ''', (cutoff_date,))
            
            deleted_count = cursor.rowcount
            conn.commit()
        
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    
    def backup_database(self, backup_path=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not backup_path:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = f"data/backup_salon_bot_{timestamp}.db"
        
        import shutil
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs("data", exist_ok=True)
            shutil.copy2(self.db.db_path, backup_path)
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
    
    def add_sample_master(self, name, specialization, social_media, address):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π user_id
            import random
            user_id = random.randint(100000000, 999999999)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.add_user(user_id, f"master_{user_id}", name, is_master=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
            master_id = self.db.add_master(user_id, name, specialization, social_media, address)
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Å—Ç–µ—Ä: {name} (ID: {master_id})")
            return master_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
            return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    admin = AdminUtils()
    
    while True:
        print("\nüìä –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("2. –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("3. –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤")
        print("4. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
        print("5. –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏")
        print("6. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
        print("7. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        
        if choice == "1":
            admin.print_statistics()
        
        elif choice == "2":
            users = admin.get_users_list()
            print(f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):")
            for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                status = "üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä" if user[3] else "üë§ –ö–ª–∏–µ–Ω—Ç"
                print(f"ID: {user[0]} | @{user[1] or 'N/A'} | {user[2]} | {status}")
        
        elif choice == "3":
            masters = admin.get_masters_list()
            print(f"\nüë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä–∞ ({len(masters)}):")
            for master in masters:
                print(f"ID: {master[0]} | {master[2]} | {master[3]} | @{master[6] or 'N/A'}")
        
        elif choice == "4":
            appointments = admin.get_recent_appointments()
            print(f"\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ({len(appointments)}):")
            for app in appointments[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"{app[4]} {app[5]} | {app[7]} -> {app[9]} | {app[10]}")
        
        elif choice == "5":
            admin.cleanup_cancelled_appointments()
        
        elif choice == "6":
            admin.backup_database()
        
        elif choice == "7":
            print("\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞:")
            name = input("–ò–º—è: ")
            spec = input("–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ")
            social = input("–°–æ—Ü—Å–µ—Ç–∏: ")
            address = input("–ê–¥—Ä–µ—Å: ")
            
            master_id = admin.add_sample_master(name, spec, social, address)
            if master_id:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª—É–≥
                services = [
                    ("–ë–∞–∑–æ–≤–∞—è —É—Å–ª—É–≥–∞", 1000, 60),
                    ("–ü—Ä–µ–º–∏—É–º —É—Å–ª—É–≥–∞", 2000, 90)
                ]
                for service_name, price, duration in services:
                    admin.db.add_service(master_id, service_name, price, duration)
                print(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ª—É–≥–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {name}")
        
        elif choice == "0":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
