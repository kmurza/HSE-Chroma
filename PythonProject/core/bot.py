import logging
from datetime import datetime, timedelta
import telebot
from telebot import types
from core.database import Database
from config.settings import BOT_TOKEN, MESSAGES, KEYBOARDS, MASTER_PASSWORD
from utils.time_utils import TimeUtils

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class SalonBot:
    def __init__(self):
        self.db = Database()
        self.bot = telebot.TeleBot(BOT_TOKEN)
        self.user_data = {}  # –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._processed_callbacks = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback'–æ–≤
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            self.start(message)
        
        @self.bot.message_handler(commands=['menu'])
        def menu_handler(message):
            self.show_main_menu(message)
        
        @self.bot.message_handler(func=lambda message: True)
        def message_handler(message):
            self.handle_message(message)
        
        @self.bot.callback_query_handler(func=lambda call: True)
        def callback_handler(call):
            self.handle_callback(call)
    
    def start(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = message.from_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        self.db.add_user(user.id, user.username, user.first_name)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for row in KEYBOARDS['main_menu']:
            markup.row(*row)
        
        self.bot.send_message(message.chat.id, MESSAGES['welcome'], reply_markup=markup)
    
    def show_main_menu(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for row in KEYBOARDS['main_menu']:
            markup.row(*row)
        
        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    
    def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = message.text
        user_id = message.from_user.id
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        message_key = f"{user_id}_{message.message_id}"
        if hasattr(self, '_processed_messages'):
            if message_key in self._processed_messages:
                logger.warning(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_key}")
                return
            self._processed_messages.add(message_key)
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
            if len(self._processed_messages) > 1000:
                self._processed_messages.clear()
        else:
            self._processed_messages = {message_key}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –º–∞—Å—Ç–µ—Ä–∞
        if user_id in self.user_data and self.user_data[user_id].get('waiting_for_master_password'):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
            if text in ["üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", "üë®‚Äçüíº –†–µ–∂–∏–º –º–∞—Å—Ç–µ—Ä–∞", "üë§ –†–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞"]:
                self.user_data[user_id]['waiting_for_master_password'] = False
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É
                if text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
                    self.show_service_types(message)
                elif text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
                    self.show_my_appointments(message)
                elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å":
                    self.show_appointments_to_cancel(message)
                elif text == "üë®‚Äçüíº –†–µ–∂–∏–º –º–∞—Å—Ç–µ—Ä–∞":
                    self.request_master_password(message)
                elif text == "üë§ –†–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞":
                    self.client_mode(message)
                return
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
            if text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/menu", "–º–µ–Ω—é", "–≤—ã—Ö–æ–¥", "–æ—Ç–º–µ–Ω–∞"]:
                self.user_data[user_id]['waiting_for_master_password'] = False
                self.show_main_menu(message)
                return
            self.handle_master_login_password(message, text)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if text.startswith("–ú–ê–°–¢–ï–†:"):
            self.process_master_registration(message, text)
            return
        elif text.startswith("–†–ê–°–ü–ò–°–ê–ù–ò–ï:"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
            if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
                self.bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä–∞ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
                return
            self.process_schedule_addition(message, text)
            return
        elif text.startswith("–£–°–õ–£–ì–ê:"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
            if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
                self.bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä–∞ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É—Å–ª—É–≥–∏.")
                return
            self.process_service_addition(message, text)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        if text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
            self.show_service_types(message)
        elif text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏":
            self.show_my_appointments(message)
        elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å":
            self.show_appointments_to_cancel(message)
        elif text == "üë®‚Äçüíº –†–µ–∂–∏–º –º–∞—Å—Ç–µ—Ä–∞":
            self.request_master_password(message)
        elif text == "üë§ –†–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞":
            self.client_mode(message)
        elif text == "üìÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            self.add_schedule_start(message)
        elif text == "üë• –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã":
            self.show_master_appointments(message)
        elif text == "üíá‚Äç‚ôÄÔ∏è –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É":
            self.add_service_start(message)
        elif text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
            self.show_master_schedule(message)
        elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            self.delete_schedule_start(message)
        elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É":
            self.delete_service_start(message)
        elif text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            if self.db.is_master(user_id):
                self.master_mode(message)
            else:
                self.show_main_menu(message)
        else:
            self.bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")
    
    def show_service_types(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∏–ø—ã —É—Å–ª—É–≥"""
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–æ–≤
        masters = self.db.get_masters()
        
        if not masters:
            self.bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        specializations = list(set([master[3] for master in masters if master[3]]))
        
        if not specializations:
            self.bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É—Å–ª—É–≥.")
            return
        
        markup = types.InlineKeyboardMarkup()
        for specialization in sorted(specializations):
            button = types.InlineKeyboardButton(
                specialization,
                callback_data=f"specialization_{specialization}"
            )
            markup.add(button)
        
        self.bot.send_message(message.chat.id, MESSAGES['choose_service'], reply_markup=markup)
    
    def show_masters_by_specialization(self, call, specialization):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        masters = self.db.get_masters_by_specialization(specialization)
        
        if not masters:
            self.bot.edit_message_text(
                f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ '{specialization}'.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        markup = types.InlineKeyboardMarkup()
        for master in masters:
            button = types.InlineKeyboardButton(
                f"{master[2]} - {master[5]}",  # name - address
                callback_data=f"master_{master[0]}"
            )
            markup.add(button)
        
        if call.from_user.id not in self.user_data:
            self.user_data[call.from_user.id] = {}
        self.user_data[call.from_user.id]['selected_specialization'] = specialization
        
        self.bot.edit_message_text(
            MESSAGES['choose_master'],
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    
    def show_my_appointments(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        user_id = message.from_user.id
        appointments = self.db.get_client_appointments(user_id)
        
        if not appointments:
            self.bot.send_message(message.chat.id, MESSAGES['no_appointments'])
            return
        
        text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
        for app in appointments:
            formatted_date = TimeUtils.format_date_russian(app[4])  # appointment_date
            duration_str = TimeUtils.format_duration(app[11])  # duration
            text += f"üìÖ {formatted_date} –≤ {app[5]}\n"  # appointment_time
            text += f"üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {app[8]}\n"  # master_name
            text += f"üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: {app[9]}\n"  # service_name
            text += f"üí∞ –¶–µ–Ω–∞: {app[10]} —Ä—É–±.\n"  # price
            text += f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}\n\n"  # duration
        
        self.bot.send_message(message.chat.id, text)
    
    def show_appointments_to_cancel(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
        user_id = message.from_user.id
        appointments = self.db.get_client_appointments(user_id)
        
        if not appointments:
            self.bot.send_message(message.chat.id, MESSAGES['no_appointments'])
            return
        
        markup = types.InlineKeyboardMarkup()
        for app in appointments:
            formatted_date = TimeUtils.format_date_russian(app[4])  # appointment_date
            button_text = f"{formatted_date} {app[5]} - {app[8]}"  # appointment_time, master_name
            button = types.InlineKeyboardButton(button_text, callback_data=f"cancel_{app[0]}")
            markup.add(button)
        
        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=markup)
    
    def request_master_password(self, message):
        """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –º–∞—Å—Ç–µ—Ä–∞"""
        user_id = message.from_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if user_id not in self.user_data:
            self.user_data[user_id] = {}
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞: –≤–æ–π—Ç–∏ –∫–∞–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Ç–µ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîë –í–æ–π—Ç–∏ –∫–∞–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Ç–µ—Ä", callback_data="login_existing_master"))
        markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞", callback_data="create_new_master"))
        
        self.bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    
    def handle_master_login_password(self, message, password):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º"""
        user_id = message.from_user.id
        master_id = self.user_data[user_id].get('selected_master_for_login')
        
        if not master_id:
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –º–∞—Å—Ç–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –ø–æ ID
        masters = self.db.get_masters()
        master = next((m for m in masters if m[0] == master_id), None)
        
        if not master:
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        if password == master[6]:  # password field
            # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π - –≤—Ö–æ–¥–∏–º –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
            
            # –ï—Å–ª–∏ —É –º–∞—Å—Ç–µ—Ä–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π user_id, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
            if master[1] == 111111111:  # —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π user_id
                self.db.update_master_user_id(master_id, user_id)
            
            self.user_data[user_id]['waiting_for_master_password'] = False
            self.user_data[user_id]['current_master_id'] = master_id
            self.user_data[user_id]['current_master_name'] = master[2]
            
            self.bot.send_message(message.chat.id, f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º '{master[2]}'!")
            self.show_master_menu(message)
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
            self.bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    def show_master_menu(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for row in KEYBOARDS['master_menu']:
            markup.row(*row)
        
        self.bot.send_message(message.chat.id, MESSAGES['master_menu'], reply_markup=markup)
    
    def client_mode(self, message):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞"""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for row in KEYBOARDS['main_menu']:
            markup.row(*row)
        
        self.bot.send_message(message.chat.id, "–†–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=markup)
    
    def add_schedule_start(self, message):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        days = TimeUtils.get_next_working_days(count=14, skip_weekends=False)
        
        markup = types.InlineKeyboardMarkup()
        for date_str, formatted_date in days:
            button = types.InlineKeyboardButton(formatted_date, callback_data=f"add_sched_date_{date_str}")
            markup.add(button)
        
        self.bot.send_message(
            message.chat.id,
            "üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:",
            reply_markup=markup
        )
    
    def add_schedule_select_start_time(self, call, date):
        """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.edit_message_text(
                "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        if user_id not in self.user_data:
            self.user_data[user_id] = {}
        self.user_data[user_id]['schedule_date'] = date
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã (—Å 6:00 –¥–æ 12:00)
        time_slots = TimeUtils.generate_time_slots("06:00", "12:00", 30)  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        
        markup = types.InlineKeyboardMarkup()
        for time_slot in time_slots:
            button = types.InlineKeyboardButton(time_slot, callback_data=f"add_sched_start_{time_slot}")
            markup.add(button)
        
        formatted_date = TimeUtils.format_date_russian(date)
        self.bot.edit_message_text(
            f"üìÖ {formatted_date}\n\n‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    
    def add_schedule_select_end_time(self, call, start_time):
        """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.edit_message_text(
                "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        self.user_data[user_id]['schedule_start_time'] = start_time
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞—á–∞–ª–æ + 2 —á–∞—Å–∞)
        try:
            start_datetime = datetime.strptime(start_time, "%H:%M")
            min_end_datetime = start_datetime + timedelta(hours=2)
            min_end_time = min_end_datetime.strftime("%H:%M")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ 22:00
            end_hour = max(min_end_datetime.hour, 10)  # –Ω–µ —Ä–∞–Ω—å—à–µ 10:00
            end_time_str = f"{end_hour:02d}:00"
            
            time_slots = TimeUtils.generate_time_slots(end_time_str, "22:00", 30)
            
            markup = types.InlineKeyboardMarkup()
            for time_slot in time_slots:
                if time_slot > start_time:  # —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
                    button = types.InlineKeyboardButton(time_slot, callback_data=f"add_sched_end_{time_slot}")
                    markup.add(button)
            
            date = self.user_data[user_id].get('schedule_date', '')
            formatted_date = TimeUtils.format_date_russian(date)
            
            self.bot.edit_message_text(
                f"üìÖ {formatted_date}\n‚è∞ –ù–∞—á–∞–ª–æ: {start_time}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            self.bot.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                call.message.chat.id,
                call.message.message_id
            )
    
    def add_schedule_confirm(self, call, end_time):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.edit_message_text(
                "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        try:
            master_id = self.user_data[user_id]['current_master_id']
            date = self.user_data[user_id]['schedule_date']
            start_time = self.user_data[user_id]['schedule_start_time']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db.add_schedule(master_id, date, start_time, end_time)
            
            formatted_date = TimeUtils.format_date_russian(date)
            
            self.bot.edit_message_text(
                f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                f"üìÖ {formatted_date}\n"
                f"‚è∞ {start_time} - {end_time}",
                call.message.chat.id,
                call.message.message_id
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'schedule_date' in self.user_data[user_id]:
                del self.user_data[user_id]['schedule_date']
            if 'schedule_start_time' in self.user_data[user_id]:
                del self.user_data[user_id]['schedule_start_time']
                
        except Exception as e:
            self.bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}",
                call.message.chat.id,
                call.message.message_id
            )
    
    def add_service_start(self, message):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.")
            return
        
        self.bot.send_message(
            message.chat.id,
            "üíá‚Äç‚ôÄÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–£–°–õ–£–ì–ê: –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å(–º–∏–Ω)\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–£–°–õ–£–ì–ê: –°—Ç—Ä–∏–∂–∫–∞ –º—É–∂—Å–∫–∞—è | 1500 | 60"
        )
    
    def show_master_appointments(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.")
            return
        
        master_id = self.user_data[user_id]['current_master_id']
        appointments = self.db.get_master_appointments(master_id)
        
        if not appointments:
            self.bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return
        
        text = "üë• –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã:\n\n"
        for app in appointments:
            formatted_date = TimeUtils.format_date_russian(app[4])  # appointment_date
            text += f"üìÖ {formatted_date} –≤ {app[5]}\n"  # appointment_time
            text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {app[8]} (@{app[9] or '–±–µ–∑ username'})\n"  # first_name, username
            text += f"üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: {app[10]}\n\n"  # service_name
        
        self.bot.send_message(message.chat.id, text)
    
    def handle_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.bot.answer_callback_query(call.id)
        
        data = call.data
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç callback
        callback_key = f"{call.from_user.id}_{call.id}"
        if callback_key in self._processed_callbacks:
            logger.warning(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π callback: {callback_key}")
            return
        self._processed_callbacks.add(callback_key)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ callback'–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
        if len(self._processed_callbacks) > 1000:
            self._processed_callbacks.clear()
        
        if data.startswith("specialization_"):
            specialization = data.split("_", 1)[1]
            self.show_masters_by_specialization(call, specialization)
        elif data.startswith("master_"):
            master_id = int(data.split("_")[1])
            self.show_master_info(call, master_id)
        elif data.startswith("service_"):
            service_id = int(data.split("_")[1])
            if call.from_user.id not in self.user_data:
                self.user_data[call.from_user.id] = {}
            self.user_data[call.from_user.id]['selected_service'] = service_id
            self.show_available_dates(call)
        elif data.startswith("date_"):
            date = data.split("_")[1]
            if call.from_user.id not in self.user_data:
                self.user_data[call.from_user.id] = {}
            self.user_data[call.from_user.id]['selected_date'] = date
            self.show_available_times(call)
        elif data.startswith("time_"):
            time = data.split("_")[1]
            self.create_appointment(call, time)
        elif data.startswith("cancel_"):
            appointment_id = int(data.split("_")[1])
            self.cancel_appointment(call, appointment_id)
        elif data == "login_existing_master":
            self.show_masters_for_login(call)
        elif data == "create_new_master":
            self.start_master_registration(call)
        elif data.startswith("login_master_"):
            master_id = int(data.split("_")[2])
            self.request_master_login_password(call, master_id)
        elif data.startswith("delete_schedule_"):
            schedule_id = int(data.split("_")[2])
            self.delete_specific_schedule(call, schedule_id)
        elif data == "delete_all_schedule":
            self.delete_all_schedule(call)
        elif data.startswith("delete_service_"):
            service_id = int(data.split("_")[2])
            self.delete_specific_service(call, service_id)
        elif data == "delete_all_services":
            self.delete_all_services(call)
        elif data.startswith("add_sched_date_"):
            date = data.split("_")[3]
            self.add_schedule_select_start_time(call, date)
        elif data.startswith("add_sched_start_"):
            start_time = data.split("_")[3]
            self.add_schedule_select_end_time(call, start_time)
        elif data.startswith("add_sched_end_"):
            end_time = data.split("_")[3]
            self.add_schedule_confirm(call, end_time)
        elif data == "master_schedule":
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º call –≤ message-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            message = types.Message()
            message.chat = call.message.chat
            message.from_user = call.from_user
            self.show_master_schedule(message)
        elif data == "master_clients":
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º call –≤ message-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            message = types.Message()
            message.chat = call.message.chat
            message.from_user = call.from_user
            self.show_master_appointments(message)
        elif data == "add_schedule":
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º call –≤ message-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            message = types.Message()
            message.chat = call.message.chat
            message.from_user = call.from_user
            self.add_schedule_start(message)
        elif data == "add_service":
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º call –≤ message-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            message = types.Message()
            message.chat = call.message.chat
            message.from_user = call.from_user
            self.add_service_start(message)
        elif data == "delete_schedule":
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º call –≤ message-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            message = types.Message()
            message.chat = call.message.chat
            message.from_user = call.from_user
            self.delete_schedule_start(message)
        elif data == "client_mode":
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º call –≤ message-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            message = types.Message()
            message.chat = call.message.chat
            message.from_user = call.from_user
            self.client_mode(message)
    
    def show_master_info(self, call, master_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –∏ –µ–≥–æ —É—Å–ª—É–≥–∏"""
        masters = self.db.get_masters()
        master = next((m for m in masters if m[0] == master_id), None)
        
        if not master:
            self.bot.edit_message_text(
                "–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        services = self.db.get_services_by_master(master_id)
        
        if not services:
            self.bot.edit_message_text(
                "–£ —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        text = MESSAGES['master_info'].format(
            address=master[5],
            social_media=master[4]
        )
        
        markup = types.InlineKeyboardMarkup()
        for service in services:
            duration_str = TimeUtils.format_duration(service[4])
            button_text = f"{service[2]} - {service[3]} —Ä—É–±. ({duration_str})"
            button = types.InlineKeyboardButton(button_text, callback_data=f"service_{service[0]}")
            markup.add(button)
        
        if call.from_user.id not in self.user_data:
            self.user_data[call.from_user.id] = {}
        self.user_data[call.from_user.id]['selected_master'] = master_id
        
        self.bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    
    def show_available_dates(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
        user_data = self.user_data.get(call.from_user.id, {})
        master_id = user_data.get('selected_master')
        
        if not master_id:
            self.bot.edit_message_text(
                "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
        master_schedule = self.db.get_master_schedule(master_id)
        
        if not master_schedule:
            self.bot.edit_message_text(
                "–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        available_dates = []
        for schedule_entry in master_schedule:
            date_str = schedule_entry[2]  # date
            if date_str not in [d[0] for d in available_dates]:
                formatted_date = TimeUtils.format_date_russian(date_str)
                available_dates.append((date_str, formatted_date))
        
        if not available_dates:
            self.bot.edit_message_text(
                "–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        markup = types.InlineKeyboardMarkup()
        for date_str, formatted_date in available_dates:
            button = types.InlineKeyboardButton(formatted_date, callback_data=f"date_{date_str}")
            markup.add(button)
        
        self.bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    
    def show_available_times(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è"""
        user_data = self.user_data.get(call.from_user.id, {})
        master_id = user_data.get('selected_master')
        date = user_data.get('selected_date')
        
        if not master_id or not date:
            self.bot.edit_message_text(
                "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä –∏–ª–∏ –¥–∞—Ç–∞.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        schedule = self.db.get_available_schedule(master_id, date)
        
        if not schedule:
            self.bot.edit_message_text(
                "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        existing_appointments = self.db.get_appointments_by_date(date)
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        existing_appointments = [app for app in existing_appointments if app[2] == master_id]
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ {master_id} –Ω–∞ {date}: {schedule}")
        logger.info(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ {date} –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {existing_appointments}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        markup = types.InlineKeyboardMarkup()
        available_slots = []
        
        for sched in schedule:
            start_time = sched[3]  # start_time
            end_time = sched[4]    # end_time
            
            time_slots = TimeUtils.generate_time_slots(start_time, end_time, 60)
            
            for time_slot in time_slots:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º –ª–∏ –≤—Ä–µ–º—è
                if not TimeUtils.is_time_in_past(date, time_slot):
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
                    service_duration = 60  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if user_data.get('selected_service'):
                        services = self.db.get_services_by_master(master_id)
                        service = next((s for s in services if s[0] == user_data['selected_service']), None)
                        if service:
                            service_duration = service[4]  # duration
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
                    is_available = TimeUtils.is_slot_available(time_slot, existing_appointments, service_duration)
                    logger.info(f"–°–ª–æ—Ç {time_slot} –¥–æ—Å—Ç—É–ø–µ–Ω: {is_available}")
                    
                    if is_available:
                        button = types.InlineKeyboardButton(time_slot, callback_data=f"time_{time_slot}")
                        markup.add(button)
                        available_slots.append(time_slot)
        
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã: {available_slots}")
        
        if markup.keyboard == []:
            self.bot.edit_message_text(
                "–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        self.bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    
    def create_appointment(self, call, time):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å"""
        user_id = call.from_user.id
        user_data = self.user_data.get(user_id, {})
        
        master_id = user_data.get('selected_master')
        service_id = user_data.get('selected_service')
        date = user_data.get('selected_date')
        
        if not all([master_id, service_id, date]):
            self.bot.edit_message_text(
                "–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω—ã.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å (–∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ show_available_times)
        appointment_id = self.db.create_appointment(user_id, master_id, service_id, date, time)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        masters = self.db.get_masters()
        master = next((m for m in masters if m[0] == master_id), None)
        services = self.db.get_services_by_master(master_id)
        service = next((s for s in services if s[0] == service_id), None)
        
        formatted_date = TimeUtils.format_date_russian(date)
        duration_str = TimeUtils.format_duration(service[4])  # service duration
        
        text = MESSAGES['appointment_created'].format(
            date=formatted_date,
            time=time,
            master=master[2],
            service=service[2],
            price=service[3]
        )
        text += f"\n‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_str}"
        text += f"\nüîî –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏!"
        
        self.bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id
        )
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in self.user_data:
            del self.user_data[user_id]
    
    def cancel_appointment(self, call, appointment_id):
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        try:
            self.db.cancel_appointment(appointment_id)
            self.bot.edit_message_text(
                MESSAGES['appointment_cancelled'],
                call.message.chat.id,
                call.message.message_id
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            self.bot.send_message(
                call.message.chat.id,
                MESSAGES['appointment_cancelled']
            )
    
    def show_masters_for_login(self, call):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞"""
        masters = self.db.get_masters_list()
        
        if not masters:
            self.bot.edit_message_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –≤—Ö–æ–¥–∞.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        markup = types.InlineKeyboardMarkup()
        for master in masters:
            button_text = f"{master[1]} ({master[2]})"  # name (specialization)
            button = types.InlineKeyboardButton(button_text, callback_data=f"login_master_{master[0]}")
            markup.add(button)
        
        self.bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –≤—Ö–æ–¥–∞:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    
    def start_master_registration(self, call):
        """–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"""
        self.bot.edit_message_text(
            "–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ú–ê–°–¢–ï–†: –ò–º—è | –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è | –°–æ—Ü—Å–µ—Ç–∏ | –ê–¥—Ä–µ—Å | –ü–∞—Ä–æ–ª—å\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ú–ê–°–¢–ï–†: –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞ | –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä | @anna_hair | —É–ª. –ü—É—à–∫–∏–Ω–∞, 10 | mypassword123",
            call.message.chat.id,
            call.message.message_id
        )
    
    def request_master_login_password(self, call, master_id):
        """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º"""
        user_id = call.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        if user_id not in self.user_data:
            self.user_data[user_id] = {}
        self.user_data[user_id]['selected_master_for_login'] = master_id
        self.user_data[user_id]['waiting_for_master_password'] = True
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–∞—Å—Ç–µ—Ä–∞
        masters = self.db.get_masters()
        master = next((m for m in masters if m[0] == master_id), None)
        master_name = master[2] if master else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä"
        
        self.bot.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º '{master_name}':",
            call.message.chat.id,
            call.message.message_id
        )
    
    def process_master_registration(self, message, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞"""
        try:
            parts = text.replace("–ú–ê–°–¢–ï–†:", "").strip().split("|")
            if len(parts) != 5:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
            name, specialization, social_media, address, password = [p.strip() for p in parts]
            user_id = message.from_user.id
            
            master_id = self.db.add_master(user_id, name, specialization, social_media, address, password)
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for row in KEYBOARDS['master_menu']:
                markup.row(*row)
            
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä '{name}'!\n"
                f"–ü–∞—Ä–æ–ª—å: {password}",
                reply_markup=markup
            )
            
        except Exception as e:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\n"
                "–§–æ—Ä–º–∞—Ç: –ú–ê–°–¢–ï–†: –ò–º—è | –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è | –°–æ—Ü—Å–µ—Ç–∏ | –ê–¥—Ä–µ—Å"
            )
    
    def process_schedule_addition(self, message, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            parts = text.replace("–†–ê–°–ü–ò–°–ê–ù–ò–ï:", "").strip().split("|")
            if len(parts) != 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
            date, start_time, end_time = [p.strip() for p in parts]
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
            if not TimeUtils.validate_date_format(date):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
            
            if not TimeUtils.validate_time_format(start_time) or not TimeUtils.validate_time_format(end_time):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
            
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
            if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
                self.bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.")
                return
            
            master_id = self.user_data[user_id]['current_master_id']
            self.db.add_schedule(master_id, date, start_time, end_time)
            
            formatted_date = TimeUtils.format_date_russian(date)
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\nüìÖ {formatted_date}\n‚è∞ {start_time} - {end_time}"
            )
            
        except Exception as e:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.\n"
                "–§–æ—Ä–º–∞—Ç: –†–ê–°–ü–ò–°–ê–ù–ò–ï: –ì–ì–ì–ì-–ú–ú-–î–î | –ß–ß:–ú–ú | –ß–ß:–ú–ú\n"
                "–ü—Ä–∏–º–µ—Ä: –†–ê–°–ü–ò–°–ê–ù–ò–ï: 2024-01-15 | 09:00 | 18:00"
            )
    
    def process_service_addition(self, message, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
        try:
            parts = text.replace("–£–°–õ–£–ì–ê:", "").strip().split("|")
            if len(parts) != 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
            name, price, duration = [p.strip() for p in parts]
            price = float(price)
            duration = int(duration)
            
            if price <= 0 or duration <= 0:
                raise ValueError("–¶–µ–Ω–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
            
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
            if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
                self.bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.")
                return
            
            master_id = self.user_data[user_id]['current_master_id']
            self.db.add_service(master_id, name, price, duration)
            
            duration_str = TimeUtils.format_duration(duration)
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nüíá‚Äç‚ôÄÔ∏è {name}\nüí∞ {price} —Ä—É–±.\n‚è±Ô∏è {duration_str}"
            )
            
        except Exception as e:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.\n"
                "–§–æ—Ä–º–∞—Ç: –£–°–õ–£–ì–ê: –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞ | –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å(–º–∏–Ω)\n"
                "–ü—Ä–∏–º–µ—Ä: –£–°–õ–£–ì–ê: –°—Ç—Ä–∏–∂–∫–∞ –º—É–∂—Å–∫–∞—è | 1500 | 60"
            )
    
    def show_master_schedule(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.")
            return
        
        master_id = self.user_data[user_id]['current_master_id']
        master_name = self.user_data[user_id]['current_master_name']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
        schedule = self.db.get_master_schedule(master_id)
        
        if not schedule:
            self.bot.send_message(message.chat.id, f"–£ –º–∞—Å—Ç–µ—Ä–∞ '{master_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
            return
        
        text = f"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ '{master_name}':\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        for s in schedule:
            date = s[2]  # date
            start_time = s[3]  # start_time
            end_time = s[4]  # end_time
            formatted_date = TimeUtils.format_date_russian(date)
            text += f"üìÖ {formatted_date}:\n"
            text += f"   ‚è∞ {start_time} - {end_time}\n\n"
        
        self.bot.send_message(message.chat.id, text)
    
    def delete_schedule_start(self, message):
        """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.send_message(message.chat.id, "–í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.")
            return
        
        master_id = self.user_data[user_id]['current_master_id']
        master_name = self.user_data[user_id]['current_master_name']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
        schedule = self.db.get_master_schedule(master_id)
        
        if not schedule:
            self.bot.send_message(message.chat.id, f"–£ –º–∞—Å—Ç–µ—Ä–∞ '{master_name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        markup = types.InlineKeyboardMarkup()
        
        for s in schedule:
            date = s[2]  # date
            schedule_id = s[0]  # id
            formatted_date = TimeUtils.format_date_russian(date)
            button_text = f"üóëÔ∏è {formatted_date}"
            button = types.InlineKeyboardButton(button_text, callback_data=f"delete_schedule_{schedule_id}")
            markup.add(button)
        
        markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="delete_all_schedule"))
        
        self.bot.send_message(
            message.chat.id,
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ '{master_name}'\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=markup
        )
    
    def delete_specific_schedule(self, call, schedule_id):
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.edit_message_text(
                "–í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        master_name = self.user_data[user_id]['current_master_name']
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        self.db.delete_schedule_by_id(schedule_id)
        
        self.bot.edit_message_text(
            f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ '{master_name}' —É–¥–∞–ª–µ–Ω–æ!",
            call.message.chat.id,
            call.message.message_id
        )
    
    def delete_all_schedule(self, call):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.edit_message_text(
                "–í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        master_id = self.user_data[user_id]['current_master_id']
        master_name = self.user_data[user_id]['current_master_name']
        
        # –£–¥–∞–ª—è–µ–º –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
        self.db.delete_master_schedule(master_id)
        
        self.bot.edit_message_text(
            f"‚úÖ –í—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ '{master_name}' —É–¥–∞–ª–µ–Ω–æ!",
            call.message.chat.id,
            call.message.message_id
        )
    
    def delete_service_start(self, message):
        """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.")
            return
        
        master_id = self.user_data[user_id]['current_master_id']
        master_name = self.user_data[user_id]['current_master_name']
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
        services = self.db.get_services_by_master(master_id)
        
        if not services:
            self.bot.send_message(message.chat.id, f"–£ –º–∞—Å—Ç–µ—Ä–∞ '{master_name}' –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
        markup = types.InlineKeyboardMarkup()
        
        for service in services:
            service_id = service[0]  # id
            service_name = service[2]  # name
            service_price = service[3]  # price
            service_duration = service[4]  # duration
            
            duration_str = TimeUtils.format_duration(service_duration)
            button_text = f"üóëÔ∏è {service_name} - {service_price} —Ä—É–±. ({duration_str})"
            button = types.InlineKeyboardButton(button_text, callback_data=f"delete_service_{service_id}")
            markup.add(button)
        
        markup.add(types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏", callback_data="delete_all_services"))
        
        self.bot.send_message(
            message.chat.id,
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –º–∞—Å—Ç–µ—Ä–∞ '{master_name}'\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )
    
    def delete_specific_service(self, call, service_id):
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.edit_message_text(
                "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        master_name = self.user_data[user_id]['current_master_name']
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É
        self.db.delete_service_by_id(service_id)
        
        self.bot.edit_message_text(
            f"‚úÖ –£—Å–ª—É–≥–∞ –º–∞—Å—Ç–µ—Ä–∞ '{master_name}' —É–¥–∞–ª–µ–Ω–∞!",
            call.message.chat.id,
            call.message.message_id
        )
    
    def delete_all_services(self, call):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º
        if user_id not in self.user_data or not self.user_data[user_id].get('current_master_id'):
            self.bot.edit_message_text(
                "‚ùå –í—ã –Ω–µ –≤–æ—à–ª–∏ –ø–æ–¥ –º–∞—Å—Ç–µ—Ä–æ–º.",
                call.message.chat.id,
                call.message.message_id
            )
            return
        
        master_id = self.user_data[user_id]['current_master_id']
        master_name = self.user_data[user_id]['current_master_name']
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞
        self.db.delete_master_services(master_id)
        
        self.bot.edit_message_text(
            f"‚úÖ –í—Å–µ —É—Å–ª—É–≥–∏ –º–∞—Å—Ç–µ—Ä–∞ '{master_name}' —É–¥–∞–ª–µ–Ω—ã!",
            call.message.chat.id,
            call.message.message_id
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ Salon Bot –∑–∞–ø—É—â–µ–Ω!")
        
        while True:
            try:
                self.bot.polling(none_stop=True, interval=1, timeout=20)
            except KeyboardInterrupt:
                logger.info("üõë Bot stopped by user")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
                logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                import time
                time.sleep(5)