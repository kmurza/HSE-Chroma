import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from core.database import Database
import logging

logger = logging.getLogger(__name__)

class SchedulerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.db = Database()
        self.scheduler = AsyncIOScheduler()
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–ø–∏—Å–∏ –≤ 10:00
        self.scheduler.add_job(
            self.send_daily_reminders,
            'cron',
            hour=10,
            minute=0,
            id='daily_reminders'
        )
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏ (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
        self.scheduler.add_job(
            self.send_hourly_reminders,
            'cron',
            minute='0,15,30,45',  # –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            id='hourly_reminders'
        )
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ø–æ–ª–Ω–æ—á—å
        self.scheduler.add_job(
            self.cleanup_old_appointments,
            'cron',
            hour=0,
            minute=0,
            id='cleanup'
        )
        
        self.scheduler.start()
        logger.info("‚è∞ Scheduler started")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.shutdown()
        logger.info("‚è∞ Scheduler stopped")
    
    async def send_daily_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–ø–∏—Å–∏"""
        try:
            appointments = self.db.get_appointments_for_reminder()
            
            for app in appointments:
                try:
                    text = (
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                        f"–£ –≤–∞—Å –∑–∞–≤—Ç—Ä–∞ –∑–∞–ø–∏—Å—å:\n"
                        f"üìÖ {datetime.strptime(app[4], '%Y-%m-%d').strftime('%d.%m.%Y')}\n"
                        f"‚è∞ {app[5]}\n"
                        f"üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {app[7]}\n"
                        f"üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: {app[8]}\n\n"
                        f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –≤–∞—à—É –∑–∞–ø–∏—Å—å! üòä"
                    )
                    
                    await self.bot.send_message(chat_id=app[1], text=text)
                    logger.info(f"Daily reminder sent to user {app[1]}")
                    
                except Exception as e:
                    logger.error(f"Failed to send daily reminder to user {app[1]}: {e}")
                    
        except Exception as e:
            logger.error(f"Error in send_daily_reminders: {e}")
    
    async def send_hourly_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏"""
        try:
            current_time = datetime.now()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 45-75 –º–∏–Ω—É—Ç (—á—Ç–æ–±—ã –ø–æ–π–º–∞—Ç—å —á–∞—Å)
            for minutes_ahead in range(45, 76, 15):  # 45, 60, 75 –º–∏–Ω—É—Ç
                target_datetime = current_time + timedelta(minutes=minutes_ahead)
                target_date = target_datetime.strftime("%Y-%m-%d")
                target_time = target_datetime.strftime("%H:%M")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                appointments = self.db.get_appointments_by_date(target_date)
                
                for app in appointments:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–æ—á–Ω–æ –ª–∏ —ç—Ç–æ –∑–∞ —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏
                        app_datetime = datetime.strptime(f"{app[4]} {app[5]}", "%Y-%m-%d %H:%M")
                        time_diff = app_datetime - current_time
                        
                        # –ï—Å–ª–∏ –¥–æ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ç 55 –¥–æ 65 –º–∏–Ω—É—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                        if timedelta(minutes=55) <= time_diff <= timedelta(minutes=65):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                            if not hasattr(app, '_reminder_sent'):
                                text = (
                                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                                    f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —á–∞—Å:\n"
                                    f"üìÖ {target_date}\n"
                                    f"‚è∞ {app[5]}\n"
                                    f"üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {app[7]}\n"
                                    f"üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: {app[8]}\n"
                                    f"üìç –ê–¥—Ä–µ—Å: {app[9]}\n\n"
                                    f"–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤–∏–∑–∏—Ç—É! üéØ"
                                )
                                
                                await self.bot.send_message(chat_id=app[1], text=text)
                                logger.info(f"Hourly reminder sent to user {app[1]} for appointment at {app[5]}")
                                
                    except Exception as e:
                        logger.error(f"Failed to send hourly reminder to user {app[1]}: {e}")
                    
        except Exception as e:
            logger.error(f"Error in send_hourly_reminders: {e}")
    
    async def cleanup_old_appointments(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        try:
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è
            cutoff_date = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE appointments 
                    SET status = 'completed' 
                    WHERE appointment_date < ? AND status = 'active'
                ''', (cutoff_date,))
                
                updated_count = cursor.rowcount
                conn.commit()
                
            logger.info(f"üßπ Cleaned up {updated_count} old appointments")
            
        except Exception as e:
            logger.error(f"Error in cleanup_old_appointments: {e}")
    
    def add_custom_reminder(self, appointment_id: int, reminder_time: datetime):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        job_id = f"reminder_{appointment_id}"
        
        self.scheduler.add_job(
            self.send_custom_reminder,
            'date',
            run_date=reminder_time,
            args=[appointment_id],
            id=job_id
        )
        
        logger.info(f"Custom reminder scheduled for appointment {appointment_id} at {reminder_time}")
    
    async def send_custom_reminder(self, appointment_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            appointment = self.db.get_appointment_by_id(appointment_id)
            
            if not appointment or appointment[7] != 'active':  # status
                return
            
            text = (
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n\n"
                f"üìÖ {datetime.strptime(appointment[4], '%Y-%m-%d').strftime('%d.%m.%Y')}\n"
                f"‚è∞ {appointment[5]}\n"
                f"üë®‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {appointment[8]}\n"
                f"üíá‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: {appointment[9]}"
            )
            
            await self.bot.send_message(chat_id=appointment[1], text=text)
            
        except Exception as e:
            logger.error(f"Failed to send custom reminder for appointment {appointment_id}: {e}")
